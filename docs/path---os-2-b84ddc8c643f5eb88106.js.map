{"version":3,"sources":["webpack:///path---os-2-b84ddc8c643f5eb88106.js","webpack:///./.cache/json/os-2.json"],"names":["webpackJsonp","435","module","exports","data","markdownRemark","html","frontmatter","title","date","tags","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,4mFAAAC,aAAkoFC,MAAA,UAAAC,KAAA,aAAAC,MAAA,kBAA+DC,aAAgBC,KAAA","file":"path---os-2-b84ddc8c643f5eb88106.js","sourcesContent":["webpackJsonp([40839369092354],{\n\n/***/ 435:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>操作系统（二）</h1>\\n<ol>\\n<li>操作系统如何管理物理主存？</li>\\n</ol>\\n<h2>计算机体系结构、主存结构分层</h2>\\n<ol>\\n<li>CPU芯片内部有寄存器和Cache，操作系统无法直接访问管理，这一层次的主存容量小但是数据很快。</li>\\n<li>在主存结构中有一块很大的区域，即主存或者物理主存。这块区域可以用来放置操作系统本身代码以及其他要运行的程序，主存容量大，速度慢。</li>\\n<li>计算机中可以在主存中存放着多个可运行的程序，若CPU的运行速度很快，且这些可运行的程序都需要很大的主存，那么CPU运行完主存中可运行的程序（假想当前主存中的可运行的所有程序都需要接收到网络响应后才能恢复运行），那么CPU就闲置下来了。为了避免CPU浪费，操作系统就需要发挥作用，将临时用不到的程序和数据放到硬盘中。</li>\\n<li>主存在计算机掉电之后其内的数据就丢失了，在主存结构的底层，就是硬盘，它用来保存数据。</li>\\n</ol>\\n<p><strong>特点</strong>：上述主存结构分层，从上到下速度依次降低，存储容量依次增大。数据访问很快，数据的存储空间很大。有了操作系统的帮助，操作系统如何管理物理主存，如何完成这个任务？</p>\\n<h2>操作系统为配合应用程序需要完成的任务</h2>\\n<p>为了配合程序，操作系统需要完成以下任务：</p>\\n<ul>\\n<li>抽象：我们希望应用程序在主存中运行时，不需要考虑物理主存和外设在什么地方，只需要访问一个连续的地址空间（逻辑地址空间）即可。</li>\\n<li>保护：在主存中可以运行多个不同的应用程序，某个程序可能会访问别的程序的地址空间，这时就需要一种机制来隔离和保护被访问程序的地址空间。</li>\\n<li>共享：除了隔离外，程序之间如何交互、共享各自的数据。</li>\\n<li>虚拟化：当需要在主存中运行的应用程序很多时，会出现主存不够用的情况。我们将暂时不用的数据临时放入硬盘，用的时候再拿出来，整个过程要对应用程序透明，这也是操作系统的任务。</li>\\n</ul>\\n<p><strong>注</strong>：上面提到了两个地址空间，主存和硬盘是物理地址空间，而应用程序在操作系统的作用下看到的是逻辑地址空间。</p>\\n<h2>地址空间与地址生成</h2>\\n<h3>地址空间定义</h3>\\n<p>地址空间分为物理地址空间和逻辑地址空间。</p>\\n<ul>\\n<li>物理地址空间：与硬件直接对应，主存条代表的主存和硬盘代表的另一种存储空间，物理地址空间的管理由硬件来完成。</li>\\n<li>逻辑地址空间：是运行程序所见到的一维线性的地址空间，应用程序非常容易控制和访问逻辑地址空间。</li>\\n<li>两者对应关系：某条程序指令指向某个一维逻辑地址，这个逻辑地址可能是该程序堆栈的某个位置，但最终这个位置可能是主存中甚至是硬盘中，操作系统完成了两者的映射关系。</li>\\n</ul>\\n<h3>逻辑地址生成</h3>\\n<ol>\\n<li>C程序通过编译变为汇编程序，在C程序中，函数的位置和变量的名字就是地址，只不过以一种更容易人理解的方式存在。</li>\\n<li>汇编程序更贴近机器语言，但是函数和变量仍然通过符号表示，相比机器语言，汇编语言更易让人阅读。</li>\\n<li>将汇编程序汇编成机器语言，即.o程序，.o程序的起始地址从0开始，此时变量和函数已经被转成了特定的地址。</li>\\n<li>一个大程序会由多个小程序组成，小程序之间往往具有复杂的依赖关系，通过链接可以将多个.o小程序最终变成一个单一的可执行程序.exe，.exe程序已经可以在主存中执行的，但是目前还放在硬盘中。</li>\\n<li>多个点.o程序中地址已经在.exe程序中有了相应的映射，但这个定义并非主存中的位置，再通过载入程序，将.exe程序放入到主存中执行，这一步为.exe程序分配在主存中的逻辑地址，使得应用程序在主存中正常的跑，.exe程序的地址做了相应的偏远，通过这个偏移量，程序就会依照这个偏移量进行执行。</li>\\n</ol>\\n<p><strong>特点</strong>：从函数和变量到最终可以在主存中执行的逻辑地址，通过了很多步骤，但这些步骤基本都不需要操作系统做任何的帮助，最终放入内存后，应用程序看到的地址仍然不是物理地址。</p>\\n<p><strong>题目</strong>\\n在内存管理中，地址变换机构将逻辑地址变为物理地址，形成该逻辑地址的阶段是编辑、编译、链接还是装载？\\n答：链接。在编译、汇编后，一个程序可能形成了多个.o文件，这是已经具有了逻辑地址，但只是相对于该模块的逻辑地址，并不能直接用于后续的地址变换。多个.h文件再经过链接，组合为.exe文件，便形成了相对于整个程序的逻辑地址。这个地址可用于后续的地址变换。</p>\\n<h3><del>逻辑地址如何对应物理地址（需要组成原理的内容做铺垫）</del></h3>\\n<p>指令放在物理内存的什么地方，指令的逻辑地址在什么地方，CPU有MMU，它有一块区域存着映射关系，查表可以完成具体的物理地址，硬件就可以从相应的物理地址中取出。</p>\\n<p>操作系统先生成一个逻辑地址和物理地址的映射关系，将该映射关系存在内存中，CPU可以在MMU中缓存这个映射关系。（<strong>如何完成预先生成，后续谈</strong>）</p>\\n<ol>\\n<li>CPU执行某条指令，ALU需要得到该指令逻辑地址上的内容，ALU首先将该逻辑地址作为参数，向存储管理单元MMU发出查物理地址的请求。</li>\\n<li>CPU的MMU查找对应的映射表，判断是否有对应的物理地址。</li>\\n<li>若没有这个物理地址，就到内存中的映射表上找</li>\\n<li>找到后CPU的控制器向主存发出请求，需要某个物理地址的内容，主存将内存的内容通过总线传给CPU，CPU拿到内容就可以进行执行了</li>\\n</ol>\\n<h2>如何确保内存中的程序不相互干扰</h2>\\n<p>操作系统首先确认每个程序可以访问的地址空间，第一部分是起始地址，第二个部分是该程序可访问的区域。这张表由操作系统建立和维护，CPU在执行某条指令时，CPU要查表确定是否合法，合法之后才根据地址取指令。</p>\",\"frontmatter\":{\"title\":\"操作系统（二）\",\"date\":\"2018-01-12\",\"tags\":[\"os\",\"memory\"]}}},\"pathContext\":{\"slug\":\"/os-2/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---os-2-b84ddc8c643f5eb88106.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>操作系统（二）</h1>\\n<ol>\\n<li>操作系统如何管理物理主存？</li>\\n</ol>\\n<h2>计算机体系结构、主存结构分层</h2>\\n<ol>\\n<li>CPU芯片内部有寄存器和Cache，操作系统无法直接访问管理，这一层次的主存容量小但是数据很快。</li>\\n<li>在主存结构中有一块很大的区域，即主存或者物理主存。这块区域可以用来放置操作系统本身代码以及其他要运行的程序，主存容量大，速度慢。</li>\\n<li>计算机中可以在主存中存放着多个可运行的程序，若CPU的运行速度很快，且这些可运行的程序都需要很大的主存，那么CPU运行完主存中可运行的程序（假想当前主存中的可运行的所有程序都需要接收到网络响应后才能恢复运行），那么CPU就闲置下来了。为了避免CPU浪费，操作系统就需要发挥作用，将临时用不到的程序和数据放到硬盘中。</li>\\n<li>主存在计算机掉电之后其内的数据就丢失了，在主存结构的底层，就是硬盘，它用来保存数据。</li>\\n</ol>\\n<p><strong>特点</strong>：上述主存结构分层，从上到下速度依次降低，存储容量依次增大。数据访问很快，数据的存储空间很大。有了操作系统的帮助，操作系统如何管理物理主存，如何完成这个任务？</p>\\n<h2>操作系统为配合应用程序需要完成的任务</h2>\\n<p>为了配合程序，操作系统需要完成以下任务：</p>\\n<ul>\\n<li>抽象：我们希望应用程序在主存中运行时，不需要考虑物理主存和外设在什么地方，只需要访问一个连续的地址空间（逻辑地址空间）即可。</li>\\n<li>保护：在主存中可以运行多个不同的应用程序，某个程序可能会访问别的程序的地址空间，这时就需要一种机制来隔离和保护被访问程序的地址空间。</li>\\n<li>共享：除了隔离外，程序之间如何交互、共享各自的数据。</li>\\n<li>虚拟化：当需要在主存中运行的应用程序很多时，会出现主存不够用的情况。我们将暂时不用的数据临时放入硬盘，用的时候再拿出来，整个过程要对应用程序透明，这也是操作系统的任务。</li>\\n</ul>\\n<p><strong>注</strong>：上面提到了两个地址空间，主存和硬盘是物理地址空间，而应用程序在操作系统的作用下看到的是逻辑地址空间。</p>\\n<h2>地址空间与地址生成</h2>\\n<h3>地址空间定义</h3>\\n<p>地址空间分为物理地址空间和逻辑地址空间。</p>\\n<ul>\\n<li>物理地址空间：与硬件直接对应，主存条代表的主存和硬盘代表的另一种存储空间，物理地址空间的管理由硬件来完成。</li>\\n<li>逻辑地址空间：是运行程序所见到的一维线性的地址空间，应用程序非常容易控制和访问逻辑地址空间。</li>\\n<li>两者对应关系：某条程序指令指向某个一维逻辑地址，这个逻辑地址可能是该程序堆栈的某个位置，但最终这个位置可能是主存中甚至是硬盘中，操作系统完成了两者的映射关系。</li>\\n</ul>\\n<h3>逻辑地址生成</h3>\\n<ol>\\n<li>C程序通过编译变为汇编程序，在C程序中，函数的位置和变量的名字就是地址，只不过以一种更容易人理解的方式存在。</li>\\n<li>汇编程序更贴近机器语言，但是函数和变量仍然通过符号表示，相比机器语言，汇编语言更易让人阅读。</li>\\n<li>将汇编程序汇编成机器语言，即.o程序，.o程序的起始地址从0开始，此时变量和函数已经被转成了特定的地址。</li>\\n<li>一个大程序会由多个小程序组成，小程序之间往往具有复杂的依赖关系，通过链接可以将多个.o小程序最终变成一个单一的可执行程序.exe，.exe程序已经可以在主存中执行的，但是目前还放在硬盘中。</li>\\n<li>多个点.o程序中地址已经在.exe程序中有了相应的映射，但这个定义并非主存中的位置，再通过载入程序，将.exe程序放入到主存中执行，这一步为.exe程序分配在主存中的逻辑地址，使得应用程序在主存中正常的跑，.exe程序的地址做了相应的偏远，通过这个偏移量，程序就会依照这个偏移量进行执行。</li>\\n</ol>\\n<p><strong>特点</strong>：从函数和变量到最终可以在主存中执行的逻辑地址，通过了很多步骤，但这些步骤基本都不需要操作系统做任何的帮助，最终放入内存后，应用程序看到的地址仍然不是物理地址。</p>\\n<p><strong>题目</strong>\\n在内存管理中，地址变换机构将逻辑地址变为物理地址，形成该逻辑地址的阶段是编辑、编译、链接还是装载？\\n答：链接。在编译、汇编后，一个程序可能形成了多个.o文件，这是已经具有了逻辑地址，但只是相对于该模块的逻辑地址，并不能直接用于后续的地址变换。多个.h文件再经过链接，组合为.exe文件，便形成了相对于整个程序的逻辑地址。这个地址可用于后续的地址变换。</p>\\n<h3><del>逻辑地址如何对应物理地址（需要组成原理的内容做铺垫）</del></h3>\\n<p>指令放在物理内存的什么地方，指令的逻辑地址在什么地方，CPU有MMU，它有一块区域存着映射关系，查表可以完成具体的物理地址，硬件就可以从相应的物理地址中取出。</p>\\n<p>操作系统先生成一个逻辑地址和物理地址的映射关系，将该映射关系存在内存中，CPU可以在MMU中缓存这个映射关系。（<strong>如何完成预先生成，后续谈</strong>）</p>\\n<ol>\\n<li>CPU执行某条指令，ALU需要得到该指令逻辑地址上的内容，ALU首先将该逻辑地址作为参数，向存储管理单元MMU发出查物理地址的请求。</li>\\n<li>CPU的MMU查找对应的映射表，判断是否有对应的物理地址。</li>\\n<li>若没有这个物理地址，就到内存中的映射表上找</li>\\n<li>找到后CPU的控制器向主存发出请求，需要某个物理地址的内容，主存将内存的内容通过总线传给CPU，CPU拿到内容就可以进行执行了</li>\\n</ol>\\n<h2>如何确保内存中的程序不相互干扰</h2>\\n<p>操作系统首先确认每个程序可以访问的地址空间，第一部分是起始地址，第二个部分是该程序可访问的区域。这张表由操作系统建立和维护，CPU在执行某条指令时，CPU要查表确定是否合法，合法之后才根据地址取指令。</p>\",\"frontmatter\":{\"title\":\"操作系统（二）\",\"date\":\"2018-01-12\",\"tags\":[\"os\",\"memory\"]}}},\"pathContext\":{\"slug\":\"/os-2/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/os-2.json\n// module id = 435\n// module chunks = 40839369092354"],"sourceRoot":""}