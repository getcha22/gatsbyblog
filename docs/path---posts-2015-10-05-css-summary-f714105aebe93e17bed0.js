webpackJsonp([0x8f465444ee4f],{460:function(n,l){n.exports={data:{markdownRemark:{html:"<h1>CSS 总结</h1>\n<p>计划总结常用的CSS知识</p>\n<h2>基本布局</h2>\n<p>下面汇总了传统的绝对，浮动，表格与凝胶等布局方式的优缺点</p>\n<h3>绝对布局</h3>\n<ul>\n<li>优点：主内容随页面宽度，固定边栏</li>\n<li>缺点：浏览器变宽的时候，页脚可能会遮住边栏，同时浏览器变宽后，主内容区和边栏的比例会不协调。</li>\n</ul>\n<h3>表格显示布局</h3>\n<ul>\n<li>优点：使用<code>table</code>标签，随窗口缩放</li>\n<li>缺点：对于语义化不利</li>\n</ul>\n<h3>凝胶布局</h3>\n<ul>\n<li>优点：主内容区建立后，设置左右margin为0</li>\n<li>缺点：对于页面的利用率不充足</li>\n</ul>\n<h2>盒子模型</h2>\n<p>边框折叠指两个垂直外边距相遇时，会碰到一起，即便是元素嵌套也不例外会进行折叠，下面有一些特殊情况：</p>\n<ol>\n<li>\n<p>上面的div有20px的边距，下面的有10px的边距，此时折叠，依然是20px的边距。但是如果此时把下面的元素设置为float，那么两者的边框不会折叠。</p>\n</li>\n<li>\n<p>考虑这种情况，一个元素嵌套一个元素，此时依然是折叠的，但如果此时为外边的元素设置了边框，那么内外元素边距不折叠</p>\n</li>\n<li>\n<p>box-sizing的用法</p>\n</li>\n</ol>\n<h2>选择器优先级</h2>\n<p>计算方法如下：计算模型分三个位置，其中，选择器若包含id，则计算模型第一位加一，第二个位置为class、伪类则加一。第三个位置为元素名，每个元素名加一，最后按照结果大小排序，对于依然冲突的规则，按照先后顺序，后出现的覆盖之前的。</p>",frontmatter:{title:"CSS 总结",date:"2015-10-5",tags:["css"]}}},pathContext:{slug:"/2015-10-05---css-summary/"}}}});
//# sourceMappingURL=path---posts-2015-10-05-css-summary-f714105aebe93e17bed0.js.map