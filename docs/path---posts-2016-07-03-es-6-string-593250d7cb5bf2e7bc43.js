webpackJsonp([74362424157059],{424:function(n,t){n.exports={data:{markdownRemark:{html:'<h1>ES6中的字符串</h1>\n<p>在ES6中，<code>Iterator</code>也被添加给了字符串，这样代表字符串可以使用<code>for ... of</code>循环了。</p>\n<pre><code class="language-js">for (let code of \'foo\') {\n    console.log(code);\n}\n// "f"\n// "o"\n// "o"\n</code></pre>\n<h2>字符串查找</h2>\n<p>接下来介绍一些可以通过 ES5 PolyFill的方法，但是现在 ES6 原生实现了</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Param</th>\n<th>Return</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>includes()</td>\n<td>需要验证是否被包含的字符串</td>\n<td>Boolean</td>\n<td>表示是否调用此方法的字符串是否包含参数中的字符串</td>\n</tr>\n<tr>\n<td>startsWith()</td>\n<td>需要被验证的字符串</td>\n<td>Boolean</td>\n<td>表示调用此方法的字符串的开头部分是否就是参数</td>\n</tr>\n<tr>\n<td>endsWith()</td>\n<td>需要验证的字符串</td>\n<td>Boolean</td>\n<td>与startsWith类似，不同点此方法为结尾</td>\n</tr>\n</tbody>\n</table>\n<p>下面看一下例子：</p>\n<pre><code class="language-js">let name = \'hello,this is Hao!\';\nname.startsWith(\'hello\');\n// true\nname.endsWith(\'!\');\n// true\nname.includes(\'this\');\n// true\n</code></pre>\n<p>这三个方法很实用，也比较简单，他们同样都接受第二个参数，表示从某个索引开始：</p>\n<pre><code class="language-js">\'11112222\'.startsWith(\'2\',4)\n// true\n</code></pre>\n<h2>字符串重复</h2>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Param</th>\n<th>Return</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>repeat()</td>\n<td>需要被重复的次数</td>\n<td>重复后的新字符串</td>\n<td>将调用此方法的字符串重复n次</td>\n</tr>\n</tbody>\n</table>\n<p>使用这个方法需要注意，如果使用小数，会先被取整，比如：2.9(2)。</p>\n<h2>最重要的，模板字符串</h2>\n<p>模板字符串，指的是增强版的字符串，使用 <code>来进行标识，它包含普通字符串的使用方法，同时还支持嵌入变量到字符串中,多行字符串。 所谓多行字符串，就是说所有空格和缩进都会被保存，嵌入变量则指使用</code>${x}`这样的方式来拼接字符串和变量，下面看例子：</p>\n<pre><code class="language-js">let name = "hao\nbig small\n";\nconsole.log(name);\n//会保持缩进和空格\n"hao\nbig small\n"\nlet obj = {a: \'xiang\'};\nlet a = `hao${obj.a}`;\nconsole.log(a);\n// haoxiang\n</code></pre>\n<p>模板字符串本质上就是在<code>${x}</code>内部执行JS代码，所以如果是一个函数，也会被执行</p>\n<pre><code class="language-js">function fn() {\n  return "Hello World";\n}\n`foo ${fn()} bar`\n// foo Hello World bar\n</code></pre>\n<p>以上。</p>',frontmatter:{title:"ES6中的字符串",date:"2016-07-03",tags:["ES6","JS"]}}},pathContext:{slug:"/2016-07-03---es6-string/"}}}});
//# sourceMappingURL=path---posts-2016-07-03-es-6-string-593250d7cb5bf2e7bc43.js.map