webpackJsonp([0xbc149b44fe03],{492:function(n,s){n.exports={data:{markdownRemark:{html:'<h1>C语言习题（三）</h1>\n<p>以下谭版C语言（第四版）第三章的习题</p>\n<h2>3计算多少月可以还清</h2>\n<p>C语言中没有关于对数的过多函数，只定义的两个函数即<code>y=log(double x)</code>和<code>y=log10(double x)</code>，<code>log</code>代表以<code>e</code>为底数，<code>log10</code>则是以10为底数，需要引入math库。</p>\n<p><code>log2(3)</code>可用换底公式表示为<code>log(3)/log(2)</code>。</p>\n<p>一般来说，如果需要使用小数则使用<code>double</code>类型，如果永远不会使用小数则使用<code>int</code>类型。除非对内存有限制或者对精度要求不高，否则一般不使用<code>float</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;process.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">double</span> <span class="token function">calM</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">,</span> <span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 默认情况下，整数部分全部输出，小数部分输出6位，现在只想输出小数部分一位，而正数部分不变</span>\n    <span class="token comment">// %m.nf，表示最少输出m位，其中小数位n位，如果只要求小数部分输出一位呢，空着m可以那？</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f个月可以还清\\n"</span><span class="token punctuation">,</span><span class="token function">calM</span><span class="token punctuation">(</span><span class="token number">300000</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">double</span> <span class="token function">calM</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">,</span><span class="token keyword">double</span> p<span class="token punctuation">,</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">double</span> m <span class="token operator">=</span> <span class="token function">log10</span><span class="token punctuation">(</span>p <span class="token operator">/</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> d <span class="token operator">*</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> m<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>运行结果如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>69.7个月可以还清\n请按任意键继续. <span class="token keyword">.</span> <span class="token keyword">.</span>\n</code></pre>\n      </div>\n<h2>4int和char的关系</h2>\n<p>运行结果如下</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>c1<span class="token operator">=</span>a, c2<span class="token operator">=</span>b\nc1<span class="token operator">=</span>97, c2<span class="token operator">=</span>98\n请按任意键继续. <span class="token keyword">.</span> <span class="token keyword">.</span>\n</code></pre>\n      </div>\n<p>因为字符类型属于整型，只不过它仅仅为一个字节。如果用整型显示时，那么就显示字符对应的整型，如果要用字符类型显示，就显示变量中存储整型值对应的ASCII字符。</p>\n<p>修改代码后，运行结果如下:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>c1<span class="token operator">=</span>? c2<span class="token operator">=</span>?\nc1<span class="token operator">=</span>-59, c2<span class="token operator">=</span>-58\n请按任意键继续. <span class="token keyword">.</span> <span class="token keyword">.</span>\n</code></pre>\n      </div>\n<p>按照<code>char</code>类型输出，VS默认为<code>signed char</code>类型，C在存储整型时，用整数的补码形式进行存放，正数的补码形式就是二进制形式，那么存储到<code>c1</code>中的值为<code>11000101</code>。</p>\n<p><code>11000101</code>是被存入到计算机中的，它是补码，现在想要将它按照字符类型输出，先看其对应的原码，使用取反加一的方法（见文末参考），原码为<code>10111011</code>，代表了<code>-59</code>，<code>-59</code>对应的ASCII码是<code>?</code>，我想负数对应的ASCII码在每个编译器中都是不同的吧，我在VS中试验了几个负数，均为<code>?</code>。</p>\n<p>继续按照第三问修改代码，运行结果如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>c1<span class="token operator">=</span>a, c2<span class="token operator">=</span>b\nc1<span class="token operator">=</span>97, c2<span class="token operator">=</span>98\n请按任意键继续. <span class="token keyword">.</span> <span class="token keyword">.</span>\n</code></pre>\n      </div>\n<p>可以预想到的，<code>char</code>只是一个字节大的<code>signed int</code>，<code>int</code>也同样可以按照字符显示，只是不要超过<code>char</code>的取值范围即可。</p>\n<h2>5在键盘上如何输入</h2>\n<p>在<code>printf</code>时，<code>%f,%e,%E,%g,%G</code>都是不同的，分别为</p>\n<ul>\n<li>使用小数形式输出，默认情况下保留整数部分，小数部分为6位</li>\n<li>按照标准化指数形式输出（区分于规范化），即小数点前必须有，且只有一位非零数字，小数部分显示6位，指数有效部分一共3位。</li>\n<li>同上，但输出结果中的e改为E</li>\n<li><code>%f,%e</code>哪个更宽，就选哪个。<code>%f,%e</code>在不同的编译器中都会有默认的位数规定，为了凑够位数经常会多添0，而<code>%g</code>则会去掉这些位数</li>\n<li>同上，只是在<code>%e</code>更宽时，其中的e用大写E。</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;process.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>\n    <span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>\n    <span class="token keyword">char</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">;</span>\n    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"a=%db=%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%f%e"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%c%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\\t%d\\t%f\\t%e\\t%c\\t%c"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>按照上面的代码，我输入最后一个字符<code>a</code>，按回车后，就提示程序发出错误，自动关闭了，暂时没有找到原因。</p>\n<h2>6密码</h2>\n<p><code>putchar(char)</code>中，参数只能是单个字符，而且给多个字符也是没有用的，最终只会输出第一个字符，比如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">\'dd\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// d</span>\n</code></pre>\n      </div>\n<p>只有单个字符能用单引号，多个字符必要要用双引号。</p>\n<p>代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;process.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">\'C\'</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token string">\'h\'</span><span class="token punctuation">,</span> c3 <span class="token operator">=</span> <span class="token string">\'i\'</span><span class="token punctuation">,</span> c4 <span class="token operator">=</span> <span class="token string">\'n\'</span><span class="token punctuation">,</span> c5 <span class="token operator">=</span> <span class="token string">\'a\'</span><span class="token punctuation">;</span>\n    <span class="token function">putchar</span><span class="token punctuation">(</span>c1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">putchar</span><span class="token punctuation">(</span>c2 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">putchar</span><span class="token punctuation">(</span>c3 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">putchar</span><span class="token punctuation">(</span>c4 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">putchar</span><span class="token punctuation">(</span>c5 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\\n%c%c%c%c%c\\n"</span><span class="token punctuation">,</span> c1<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> c2<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> c3<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> c4<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> c5<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>运行结果：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>Glmre\nGlmre\n请按任意键继续. <span class="token keyword">.</span> <span class="token keyword">.</span>\n</code></pre>\n      </div>\n<h2>8int和char的关系</h2>\n<p><code>getchar()</code>得到的值需要赋给某个变量，输入内容会被视为字符，例如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code>a <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入118</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出1</span>\n<span class="token comment">// 118被看成了三个字符，最终输出了首个字符，scanf()也是一样，不要妄想将118整体当成一个字符，比如</span>\n<span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入118</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出1</span>\n<span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入119</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出1</span>\n<span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入118</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出49，即1的ASCII码</span>\n<span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入119</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出49，即1的ASCII码</span>\n</code></pre>\n      </div>\n<p>代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;process.h></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">char</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">;</span>\n    c1 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c2 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">putchar</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">putchar</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">\'\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c1=%c\\tc2=%c\\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>运行结果如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>ab\nab\nc1<span class="token operator">=</span>a    c2<span class="token operator">=</span>b\n请按任意键继续. <span class="token keyword">.</span> <span class="token keyword">.</span>\n</code></pre>\n      </div>\n<p>原理上<code>int</code>和<code>char</code>都可以的，因为输入的字符经过转换后一定在<code>char</code>的范围内，更是在<code>int</code>的范围内，但既然是字符，用<code>char</code>更符合语义。</p>\n<p>要输出字符的ASCII码值，只能用<code>printf()</code>，因为<code>putchar</code>函数是针对单个字符的，比如<code>printf("%d",varchar)</code>;</p>\n<p><code>int</code>和<code>char</code>只有在ASCII码的取值范围内时可以互换，否则不行，超过范围就没有对应的ASCII码值进行映射了。如果取值再大，超过了一个字节的范围，生效的也只是整型变量的最后一个字节。</p>\n<h2>参考</h2>\n<ul>\n<li><a href="https://zhidao.baidu.com/question/181720031.html">原码补码转换</a></li>\n</ul>',frontmatter:{title:"C语言习题（三）",date:"2018-02-22",tags:["C"]}}},pathContext:{slug:"/2018-02-28----c-language-exercises-3/"}}}});
//# sourceMappingURL=path---posts-2018-02-28-c-language-exercises-3-2eadc88b163adbb1a9f3.js.map