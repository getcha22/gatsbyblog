webpackJsonp([0x6fbaa97f8567],{489:function(e,n){e.exports={data:{markdownRemark:{html:"<h1>为什么选择GatsbyJS（待完善）</h1>\n<p>熟悉React技术栈的开发者，应该会喜欢GatsbyJS，它基于React，在此基础之上，有些场景下，可以完全摆脱后端自己处理数据，之后使用React那一套<code>props</code>组件传递，将数据逐层分配下去。\nGatsbyJS在2015年中由Kyle Mathews开源，项目后来不断壮大，目前已经拥有了13k的star。</p>\n<p>谁也不喜欢对着一个没有交互，加载速度又很慢的网站，</p>\n<p>网站的内容多久能被看到（速度指数，Speed Index），网站多久能真正可用，指能与用户交互（交互时间，Time to Interactive-TTI）。</p>\n<h2>一些改善网站性能的方法</h2>\n<p>下面讨论一些可以改进网站性能的方法。</p>\n<h3>避免在客户端下载本不需要的资源</h3>\n<p>不要去加载不必要的JS,CSS，图片等等。</p>\n<h3>不需要立马加载的资源</h3>\n<p>遇到不需要立马加载的资源，就defer它，让骨架先加载，页面显示部分内容，不断完善。别让不需要立马加载的资源阻塞了页面，避免出现长时间的白屏。</p>\n<p>基本的观点是仅仅加载要立即在首页显示的资源，推迟加载其他页面的JS，推迟加载可选的页面（比如页面的小部件）等等，先加载尽可能少的JS，让网站可用。</p>\n<h3>拆分代码</h3>\n<p>用webpack等技术的开发者，往往都喜欢将所有的JS代码打包到一个文件中，认为这样只需要一次请求就可以收到所有JS资源，是非常棒的事情，但其实不如拆分这个巨大的包。</p>\n<h2>为什么GatsbyJS会很快</h2>\n<p>大部分的前端框架，运行起来都很简单，但是想要优化，则需要开发者有较强的代码功底，而在GatsbyJS中，则将这些优化尽可能的对用户透明，放在内部来做。</p>\n<ul>\n<li>内联关键部分的CSS</li>\n<li>自动设置preload</li>\n</ul>\n<blockquote>\n<p><code>&#x3C;link></code> 元素的 rel 属性的属性值preload能够让你在你的HTML页面中 <code>&#x3C;head></code>元素内部书写一些声明式的资源获取请求，可以指明哪些资源是在页面加载完成后即刻需要的。对于这种即刻需要的资源，你可能希望在页面加载的生命周期的早期阶段就开始获取，在浏览器的主渲染机制介入前就进行预加载。这一机制使得资源可以更早的得到加载并可用，且更不易阻塞页面的初步渲染，进而提升性能。本文提供了一个如何有效使用preload机制的基本说明。</p>\n</blockquote>\n<ul>\n<li>预加载后续会被用到的资源</li>\n</ul>",frontmatter:{title:"为什么选择GatsbyJS？",date:"2018-02-12",tags:["React","JavaScript"]}}},pathContext:{slug:"/2018-02-12---why-is-gatsby-fast/"}}}});
//# sourceMappingURL=path---posts-2018-02-12-why-is-gatsby-fast-228caf89d096dd06bd59.js.map