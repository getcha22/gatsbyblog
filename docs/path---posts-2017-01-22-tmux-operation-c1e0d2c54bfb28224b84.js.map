{"version":3,"sources":["webpack:///path---posts-2017-01-22-tmux-operation-c1e0d2c54bfb28224b84.js","webpack:///./.cache/json/posts-2017-01-22-tmux-operation.json"],"names":["webpackJsonp","453","module","exports","data","markdownRemark","html","frontmatter","title","date","tags","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,iyGAAo1FC,aAAmlBC,MAAA,WAAAC,KAAA,aAAAC,MAAA,mBAAiEC,aAAgBC,KAAA","file":"path---posts-2017-01-22-tmux-operation-c1e0d2c54bfb28224b84.js","sourcesContent":["webpackJsonp([160822016440208],{\n\n/***/ 453:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>tmux基本操作</h1>\\n<p>电脑换回了win10系统，使用bash on windows进行开发，有个问题一直很困扰。\\n在windows系统下面，少见非常优秀的，类似iTerm2那样的终端软件。使用cmder对于bash的美化确实起到了很大的作用，但是对屏幕的管理依然不方便。最近留意到了tmux这款终端复用工具，简单使用后，发现它的确非常棒，给我带来了不少的便利。</p>\\n<h2>Session</h2>\\n<p>创建一个Session，默认情况下，当在shell中输入<code>tmux</code>时，就会自动创建一个名称为<code>0</code>的Session</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token comment\\\">#　创建Session</span>\\ntmux\\n<span class=\\\"token comment\\\"># 查看当前建立的Session，使用下面两个命令</span>\\ntmux list-session\\n<span class=\\\"token comment\\\"># 缩写</span>\\ntmux <span class=\\\"token function\\\">ls</span>\\n0: 1 windows <span class=\\\"token punctuation\\\">(</span>created Sat Jan 21 11:27:33 2017<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">[</span>55x35<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\"># 创建一个指定名称的Session</span>\\ntmux new -s <span class=\\\"token variable\\\">$name</span>\\n<span class=\\\"token comment\\\"># 使用t参数关闭指定的Session</span>\\ntmux kill-session -t <span class=\\\"token variable\\\">$name</span>\\n<span class=\\\"token comment\\\"># 将指定的Session放置到后台中</span>\\ntmux detach -t  <span class=\\\"token variable\\\">$name</span>\\n<span class=\\\"token comment\\\"># 加载处于在后台中的Session</span>\\ntmux attach-session -t <span class=\\\"token variable\\\">$name</span>\\n<span class=\\\"token comment\\\"># 完全退出，关闭所有的Session</span>\\ntmux kill-server\\n</code></pre>\\n      </div>\\n<h2>Window</h2>\\n<p>在Session之下，可以开设很多得当Window，其实当我们创建一个Session时，就已经会默认创建一个Window了。</p>\\n<p>在Window中，可以使用很多命令进行闪转腾挪了，默认调用命令的快捷键是<code>Ctrl-b</code>，看下面的例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token comment\\\">#Ctrl-b &lt;command></span>\\n<span class=\\\"token comment\\\"># 列出当前所有的Window</span>\\nCtrl-b w \\n<span class=\\\"token punctuation\\\">(</span>0<span class=\\\"token punctuation\\\">)</span>  0: ~  <span class=\\\"token string\\\">\\\"DESKTOP-IE8ULOJ\\\"</span>\\n<span class=\\\"token punctuation\\\">(</span>1<span class=\\\"token punctuation\\\">)</span>  1: ~  <span class=\\\"token string\\\">\\\"DESKTOP-IE8ULOJ\\\"</span>\\n<span class=\\\"token punctuation\\\">(</span>2<span class=\\\"token punctuation\\\">)</span>  2: ~- <span class=\\\"token string\\\">\\\"DESKTOP-IE8ULOJ\\\"</span>\\n<span class=\\\"token punctuation\\\">(</span>3<span class=\\\"token punctuation\\\">)</span>  3: ~* <span class=\\\"token string\\\">\\\"DESKTOP-IE8ULOJ\\\"</span>\\n<span class=\\\"token comment\\\"># 创建一个Wind ow （create）</span>\\nCtrl-b c\\n<span class=\\\"token comment\\\"># 切换到下一个Window （next）</span>\\nCtrl-b n\\n<span class=\\\"token comment\\\"># 切换到上一个Window（previous）</span>\\nCtrl-b p\\n<span class=\\\"token comment\\\"># 切换到指定序号的Window</span>\\nCtrl-b <span class=\\\"token punctuation\\\">[</span>0-9<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\"># 重命名当前窗口的名称</span>\\nCtrl-b ，\\n<span class=\\\"token comment\\\"># 关闭当前窗口</span>\\nCtrl-b <span class=\\\"token operator\\\">&amp;</span>\\n</code></pre>\\n      </div>\\n<h2>Pane</h2>\\n<p>在Window层级的切换时全屏的，可以继续分，往下的这个层级叫做Pane</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token comment\\\"># 垂直分割</span>\\nCtrl-b %\\n<span class=\\\"token comment\\\"># 水平分割</span>\\nCtrl-b “”\\n<span class=\\\"token comment\\\"># 在窗口之间切换</span>\\nCtrl-b o\\n<span class=\\\"token comment\\\"># 按照指定的方向切换</span>\\nCtrl-b 方向键\\n<span class=\\\"token comment\\\"># tmux默认有几种Pane的布局方式，这个命令用来在默认的布局方式中切换</span>\\nCtrl-b 空格\\n<span class=\\\"token comment\\\"># 关闭当前Pane</span>\\nCtrl-b x\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"tmux日常操作\",\"date\":\"2017-01-22\",\"tags\":[\"Tmux\",\"Linux\"]}}},\"pathContext\":{\"slug\":\"/2017-01-22---tmux-operation/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-2017-01-22-tmux-operation-c1e0d2c54bfb28224b84.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>tmux基本操作</h1>\\n<p>电脑换回了win10系统，使用bash on windows进行开发，有个问题一直很困扰。\\n在windows系统下面，少见非常优秀的，类似iTerm2那样的终端软件。使用cmder对于bash的美化确实起到了很大的作用，但是对屏幕的管理依然不方便。最近留意到了tmux这款终端复用工具，简单使用后，发现它的确非常棒，给我带来了不少的便利。</p>\\n<h2>Session</h2>\\n<p>创建一个Session，默认情况下，当在shell中输入<code>tmux</code>时，就会自动创建一个名称为<code>0</code>的Session</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token comment\\\">#　创建Session</span>\\ntmux\\n<span class=\\\"token comment\\\"># 查看当前建立的Session，使用下面两个命令</span>\\ntmux list-session\\n<span class=\\\"token comment\\\"># 缩写</span>\\ntmux <span class=\\\"token function\\\">ls</span>\\n0: 1 windows <span class=\\\"token punctuation\\\">(</span>created Sat Jan 21 11:27:33 2017<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">[</span>55x35<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\"># 创建一个指定名称的Session</span>\\ntmux new -s <span class=\\\"token variable\\\">$name</span>\\n<span class=\\\"token comment\\\"># 使用t参数关闭指定的Session</span>\\ntmux kill-session -t <span class=\\\"token variable\\\">$name</span>\\n<span class=\\\"token comment\\\"># 将指定的Session放置到后台中</span>\\ntmux detach -t  <span class=\\\"token variable\\\">$name</span>\\n<span class=\\\"token comment\\\"># 加载处于在后台中的Session</span>\\ntmux attach-session -t <span class=\\\"token variable\\\">$name</span>\\n<span class=\\\"token comment\\\"># 完全退出，关闭所有的Session</span>\\ntmux kill-server\\n</code></pre>\\n      </div>\\n<h2>Window</h2>\\n<p>在Session之下，可以开设很多得当Window，其实当我们创建一个Session时，就已经会默认创建一个Window了。</p>\\n<p>在Window中，可以使用很多命令进行闪转腾挪了，默认调用命令的快捷键是<code>Ctrl-b</code>，看下面的例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token comment\\\">#Ctrl-b &lt;command></span>\\n<span class=\\\"token comment\\\"># 列出当前所有的Window</span>\\nCtrl-b w \\n<span class=\\\"token punctuation\\\">(</span>0<span class=\\\"token punctuation\\\">)</span>  0: ~  <span class=\\\"token string\\\">\\\"DESKTOP-IE8ULOJ\\\"</span>\\n<span class=\\\"token punctuation\\\">(</span>1<span class=\\\"token punctuation\\\">)</span>  1: ~  <span class=\\\"token string\\\">\\\"DESKTOP-IE8ULOJ\\\"</span>\\n<span class=\\\"token punctuation\\\">(</span>2<span class=\\\"token punctuation\\\">)</span>  2: ~- <span class=\\\"token string\\\">\\\"DESKTOP-IE8ULOJ\\\"</span>\\n<span class=\\\"token punctuation\\\">(</span>3<span class=\\\"token punctuation\\\">)</span>  3: ~* <span class=\\\"token string\\\">\\\"DESKTOP-IE8ULOJ\\\"</span>\\n<span class=\\\"token comment\\\"># 创建一个Wind ow （create）</span>\\nCtrl-b c\\n<span class=\\\"token comment\\\"># 切换到下一个Window （next）</span>\\nCtrl-b n\\n<span class=\\\"token comment\\\"># 切换到上一个Window（previous）</span>\\nCtrl-b p\\n<span class=\\\"token comment\\\"># 切换到指定序号的Window</span>\\nCtrl-b <span class=\\\"token punctuation\\\">[</span>0-9<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\"># 重命名当前窗口的名称</span>\\nCtrl-b ，\\n<span class=\\\"token comment\\\"># 关闭当前窗口</span>\\nCtrl-b <span class=\\\"token operator\\\">&amp;</span>\\n</code></pre>\\n      </div>\\n<h2>Pane</h2>\\n<p>在Window层级的切换时全屏的，可以继续分，往下的这个层级叫做Pane</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code><span class=\\\"token comment\\\"># 垂直分割</span>\\nCtrl-b %\\n<span class=\\\"token comment\\\"># 水平分割</span>\\nCtrl-b “”\\n<span class=\\\"token comment\\\"># 在窗口之间切换</span>\\nCtrl-b o\\n<span class=\\\"token comment\\\"># 按照指定的方向切换</span>\\nCtrl-b 方向键\\n<span class=\\\"token comment\\\"># tmux默认有几种Pane的布局方式，这个命令用来在默认的布局方式中切换</span>\\nCtrl-b 空格\\n<span class=\\\"token comment\\\"># 关闭当前Pane</span>\\nCtrl-b x\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"tmux日常操作\",\"date\":\"2017-01-22\",\"tags\":[\"Tmux\",\"Linux\"]}}},\"pathContext\":{\"slug\":\"/2017-01-22---tmux-operation/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-2017-01-22-tmux-operation.json\n// module id = 453\n// module chunks = 160822016440208"],"sourceRoot":""}