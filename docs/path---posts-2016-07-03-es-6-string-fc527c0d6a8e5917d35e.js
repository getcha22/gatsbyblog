webpackJsonp([74362424157059],{470:function(n,s){n.exports={data:{markdownRemark:{html:'<h1>ES6中的字符串</h1>\n<p>在ES6中，<code>Iterator</code>也被添加给了字符串，这样代表字符串可以使用<code>for ... of</code>循环了。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> code <span class="token keyword">of</span> <span class="token string">\'foo\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// "f"</span>\n<span class="token comment">// "o"</span>\n<span class="token comment">// "o"</span>\n</code></pre>\n      </div>\n<h2>字符串查找</h2>\n<p>接下来介绍一些可以通过 ES5 PolyFill的方法，但是现在 ES6 原生实现了</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Param</th>\n<th>Return</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>includes()</td>\n<td>需要验证是否被包含的字符串</td>\n<td>Boolean</td>\n<td>表示是否调用此方法的字符串是否包含参数中的字符串</td>\n</tr>\n<tr>\n<td>startsWith()</td>\n<td>需要被验证的字符串</td>\n<td>Boolean</td>\n<td>表示调用此方法的字符串的开头部分是否就是参数</td>\n</tr>\n<tr>\n<td>endsWith()</td>\n<td>需要验证的字符串</td>\n<td>Boolean</td>\n<td>与startsWith类似，不同点此方法为结尾</td>\n</tr>\n</tbody>\n</table>\n<p>下面看一下例子：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">\'hello,this is Hao!\'</span><span class="token punctuation">;</span>\nname<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// true</span>\nname<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">\'!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// true</span>\nname<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'this\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// true</span>\n</code></pre>\n      </div>\n<p>这三个方法很实用，也比较简单，他们同样都接受第二个参数，表示从某个索引开始：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token string">\'11112222\'</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'2\'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n</code></pre>\n      </div>\n<h2>字符串重复</h2>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Param</th>\n<th>Return</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>repeat()</td>\n<td>需要被重复的次数</td>\n<td>重复后的新字符串</td>\n<td>将调用此方法的字符串重复n次</td>\n</tr>\n</tbody>\n</table>\n<p>使用这个方法需要注意，如果使用小数，会先被取整，比如：2.9(2)。</p>\n<h2>最重要的，模板字符串</h2>\n<p>模板字符串，指的是增强版的字符串，使用 <code>来进行标识，它包含普通字符串的使用方法，同时还支持嵌入变量到字符串中,多行字符串。 所谓多行字符串，就是说所有空格和缩进都会被保存，嵌入变量则指使用</code>${x}`这样的方式来拼接字符串和变量，下面看例子：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hao\nbig small\n`</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 会保持缩进和空格</span>\n<span class="token comment">// hao</span>\n<span class="token comment">// big small</span>\n\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">\'xiang\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hao</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// haoxiang</span>\n</code></pre>\n      </div>\n<p>模板字符串本质上就是在<code>${x}</code>内部执行JS代码，所以如果是一个函数，也会被执行</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token template-string"><span class="token string">`foo </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bar`</span></span>\n<span class="token comment">// foo Hello World bar</span>\n</code></pre>\n      </div>\n<p>以上。</p>',frontmatter:{title:"ES6中的字符串",date:"2016-07-03",tags:["ES6","JS"]}}},pathContext:{slug:"/2016-07-03---es6-string/"}}}});
//# sourceMappingURL=path---posts-2016-07-03-es-6-string-fc527c0d6a8e5917d35e.js.map