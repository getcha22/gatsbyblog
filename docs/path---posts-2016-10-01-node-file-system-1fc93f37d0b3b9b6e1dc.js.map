{"version":3,"sources":["webpack:///path---posts-2016-10-01-node-file-system-1fc93f37d0b3b9b6e1dc.js","webpack:///./.cache/json/posts-2016-10-01-node-file-system.json"],"names":["webpackJsonp","477","module","exports","data","markdownRemark","html","frontmatter","title","date","tags","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,gzdAAqzeC,aAAqDC,MAAA,WAAAC,KAAA,aAAAC,MAAA,gBAA8DC,aAAgBC,KAAA","file":"path---posts-2016-10-01-node-file-system-1fc93f37d0b3b9b6e1dc.js","sourcesContent":["webpackJsonp([110826550075370],{\n\n/***/ 477:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Node文件系统</h1>\\n<p><code>Node</code>通过封装基本的<code>POSIX</code>函数来提供文件系统，使用<code>require('fs')</code>来使用这个模块，所有与文件相关的方法，都提供了异步和同步的形式。 异步的方法通常会将一个可选的回调函数作为最后一个参数，回调函数的第一个参数通常留给意外情况，如果操作是成功的，第一个参数将是<code>null</code>或者<code>undeefined</code>。 使用同步方法，对于任何意外都会即时抛出，可以使用<code>try/catch</code>语句来处理意外情况，或者让错误时间向上冒泡。 下面是一个有关异步方法的基本例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlink</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/hello'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sucessfully deleted /tmp/hello'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>再跟着一个同步的例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlink</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/hello'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'successfully deleted /tmp/hello'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>使用异步方法时，需要注意异步方法的执行不一定按照书写顺序，比如下面这种写法很容易出错：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">rename</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/hello'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/tmp/world'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\n   console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'renamed compelte'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/world'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> stats<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`stats: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>stats<span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>在这里，很可能<code>fs.stat</code>函数先于<code>fs.rename</code>，这样会出现一些不必要的错误，正确的方法应该是写在回调函数中:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">rename</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/hello/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/tmp/world'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> ss<span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/world'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> stats<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>`stats<span class=\\\"token punctuation\\\">:</span> $<span class=\\\"token punctuation\\\">{</span>JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringfy</span><span class=\\\"token punctuation\\\">(</span>stats<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>执行复杂耗时的方法，强烈建议使用异步版本，同步方法在它们执行结束之前，会一直锁住当前线程，阻断所有操作。 在<code>fs</code>模块中，可以使用相对路径，但是需要留意参照的路径来自于<code>process.cwd()</code>的返回值。 很多<code>fs</code>函数可以忽略掉回调参数，如果这样进行使用，默认会抛出错误，为了跟踪到函数调用的位置，可以设置<code>NODE_DEBUG</code>环境变量：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>$ <span class=\\\"token function\\\">cat</span> script.js\\n<span class=\\\"token keyword\\\">function</span> bad<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  require<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span>.readFile<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nbad<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n$ <span class=\\\"token function\\\">env</span> NODE_DEBUG<span class=\\\"token operator\\\">=</span>fs node script.js\\nfs.js:66\\n        throw err<span class=\\\"token punctuation\\\">;</span>\\n              ^\\nError: EISDIR, <span class=\\\"token function\\\">read</span>\\n    at rethrow <span class=\\\"token punctuation\\\">(</span>fs.js:61:21<span class=\\\"token punctuation\\\">)</span>\\n    at maybeCallback <span class=\\\"token punctuation\\\">(</span>fs.js:79:42<span class=\\\"token punctuation\\\">)</span>\\n    at Object.fs.readFile <span class=\\\"token punctuation\\\">(</span>fs.js:153:18<span class=\\\"token punctuation\\\">)</span>\\n    at bad <span class=\\\"token punctuation\\\">(</span>/path/to/script.js:2:17<span class=\\\"token punctuation\\\">)</span>\\n    at Object.<span class=\\\"token operator\\\">&lt;</span>anonymous<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span>/path/to/script.js:5:1<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token operator\\\">&lt;</span>etc.<span class=\\\"token operator\\\">></span>\\n</code></pre>\\n      </div>\\n<p><code>fs.watch(filename[, options][, listener])</code>监听制定文件或者目录的变化情况，<code>filename</code>参数可以是文件或者目录，这个方法返回一个<code>fs.FSWather</code>对象。 第二个参数是可选的，提供的<code>options</code>参数应该是一个对象，里面要求的成员是<code>persistent</code>和<code>recursive</code>，这个两个成员都是布尔类型的值。 用做监听的回调函数有两个参数，分别是(<code>event</code>, <code>filename</code>)，<code>event</code>的值视情况，返回字符串<code>change</code>，<code>rename</code>，文件名指的是触发事件的这个文件。看下面的这个例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// node.md</span>\\n<span class=\\\"token comment\\\">// 被监听的文件</span>\\n<span class=\\\"token keyword\\\">this</span> is cat<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token comment\\\">// app.js</span>\\n<span class=\\\"token comment\\\">// 用来监听文件改变</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./node.md'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'下面是event参数，event参数的类型，filename'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> event<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// node.md</span>\\n<span class=\\\"token comment\\\">// 这里修改了监听的node.md文件</span>\\n<span class=\\\"token keyword\\\">this</span> is dog<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token comment\\\">// console</span>\\n<span class=\\\"token comment\\\">// 执行结果</span>\\n下面是event参数，event参数的类型，filename\\nchange\\nstring\\nnode<span class=\\\"token punctuation\\\">.</span>md\\n<span class=\\\"token comment\\\">// node.md => node1.md</span>\\n<span class=\\\"token comment\\\">// 修改文件的名字</span>\\n<span class=\\\"token comment\\\">// console</span>\\n<span class=\\\"token comment\\\">// 执行结果</span>\\n下面是event参数，event参数的类型，filename\\nrename\\nstring\\nnode1<span class=\\\"token punctuation\\\">.</span>md\\n</code></pre>\\n      </div>\\n<p>注意事项： <code>fs.watch</code>并不是跨所有平台的，在某些常见下不一定可用。 第二个参数中的布尔值<code>recursive</code>只在<code>osx</code>和<code>window</code>下可以使用。</p>\\n<h2>可用性</h2>\\n<ul>\\n<li><code>fs.watch</code>依赖于操作系统底层模块，由操作系统底层模块通知Node文件的变化。</li>\\n<li>如果某个操作系统底层模块对于文件的监听本身就有问题，那么<code>fs.watch</code>是无法发挥作用的，比如监听了一些不可靠的目录和文件，网络文件系统，虚拟机系统中的文件。</li>\\n<li>在<code>Linux</code>，<code>osx</code>系统中，<code>fs.watch</code>解析路径成一个索引节点，并且监听这个节点，但是如果监听的节点被删除或者重新创建，那么此时它就成了一个新节点了，<code>watch</code>将会发送一个<code>delete</code>事件，但是仍然监听原来的节点，原来的事件不会响应新节点的改变，这种处理是符合预期的。</li>\\n<li><code>filename</code>参数只支持在<code>Linux</code>和<code>windows</code>上面指定(<code>osx</code>也可以，但是有些情况可能会有异常)，事实上，即便是在可以使用的平台上，也不建议直接使用这个参数，因为在回调函数内部，建议增加一些逻辑判断，看一下<code>filename</code>是否为<code>null</code>，如下面的例子：</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'somedir'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`event is: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>event<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n         console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`filename provided: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>filename<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n         console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'filename not provided'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Node文件系统\",\"date\":\"2016-10-01\",\"tags\":[\"Node\",\"JS\"]}}},\"pathContext\":{\"slug\":\"/2016-10-01---node-file-system/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-2016-10-01-node-file-system-1fc93f37d0b3b9b6e1dc.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Node文件系统</h1>\\n<p><code>Node</code>通过封装基本的<code>POSIX</code>函数来提供文件系统，使用<code>require('fs')</code>来使用这个模块，所有与文件相关的方法，都提供了异步和同步的形式。 异步的方法通常会将一个可选的回调函数作为最后一个参数，回调函数的第一个参数通常留给意外情况，如果操作是成功的，第一个参数将是<code>null</code>或者<code>undeefined</code>。 使用同步方法，对于任何意外都会即时抛出，可以使用<code>try/catch</code>语句来处理意外情况，或者让错误时间向上冒泡。 下面是一个有关异步方法的基本例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlink</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/hello'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sucessfully deleted /tmp/hello'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>再跟着一个同步的例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlink</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/hello'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'successfully deleted /tmp/hello'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>使用异步方法时，需要注意异步方法的执行不一定按照书写顺序，比如下面这种写法很容易出错：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">rename</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/hello'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/tmp/world'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\n   console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'renamed compelte'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/world'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> stats<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`stats: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>stats<span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>在这里，很可能<code>fs.stat</code>函数先于<code>fs.rename</code>，这样会出现一些不必要的错误，正确的方法应该是写在回调函数中:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">rename</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/hello/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/tmp/world'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> ss<span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> err<span class=\\\"token punctuation\\\">;</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/tmp/world'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> stats<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>`stats<span class=\\\"token punctuation\\\">:</span> $<span class=\\\"token punctuation\\\">{</span>JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringfy</span><span class=\\\"token punctuation\\\">(</span>stats<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>执行复杂耗时的方法，强烈建议使用异步版本，同步方法在它们执行结束之前，会一直锁住当前线程，阻断所有操作。 在<code>fs</code>模块中，可以使用相对路径，但是需要留意参照的路径来自于<code>process.cwd()</code>的返回值。 很多<code>fs</code>函数可以忽略掉回调参数，如果这样进行使用，默认会抛出错误，为了跟踪到函数调用的位置，可以设置<code>NODE_DEBUG</code>环境变量：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>$ <span class=\\\"token function\\\">cat</span> script.js\\n<span class=\\\"token keyword\\\">function</span> bad<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  require<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span>.readFile<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nbad<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n$ <span class=\\\"token function\\\">env</span> NODE_DEBUG<span class=\\\"token operator\\\">=</span>fs node script.js\\nfs.js:66\\n        throw err<span class=\\\"token punctuation\\\">;</span>\\n              ^\\nError: EISDIR, <span class=\\\"token function\\\">read</span>\\n    at rethrow <span class=\\\"token punctuation\\\">(</span>fs.js:61:21<span class=\\\"token punctuation\\\">)</span>\\n    at maybeCallback <span class=\\\"token punctuation\\\">(</span>fs.js:79:42<span class=\\\"token punctuation\\\">)</span>\\n    at Object.fs.readFile <span class=\\\"token punctuation\\\">(</span>fs.js:153:18<span class=\\\"token punctuation\\\">)</span>\\n    at bad <span class=\\\"token punctuation\\\">(</span>/path/to/script.js:2:17<span class=\\\"token punctuation\\\">)</span>\\n    at Object.<span class=\\\"token operator\\\">&lt;</span>anonymous<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span>/path/to/script.js:5:1<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token operator\\\">&lt;</span>etc.<span class=\\\"token operator\\\">></span>\\n</code></pre>\\n      </div>\\n<p><code>fs.watch(filename[, options][, listener])</code>监听制定文件或者目录的变化情况，<code>filename</code>参数可以是文件或者目录，这个方法返回一个<code>fs.FSWather</code>对象。 第二个参数是可选的，提供的<code>options</code>参数应该是一个对象，里面要求的成员是<code>persistent</code>和<code>recursive</code>，这个两个成员都是布尔类型的值。 用做监听的回调函数有两个参数，分别是(<code>event</code>, <code>filename</code>)，<code>event</code>的值视情况，返回字符串<code>change</code>，<code>rename</code>，文件名指的是触发事件的这个文件。看下面的这个例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// node.md</span>\\n<span class=\\\"token comment\\\">// 被监听的文件</span>\\n<span class=\\\"token keyword\\\">this</span> is cat<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token comment\\\">// app.js</span>\\n<span class=\\\"token comment\\\">// 用来监听文件改变</span>\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./node.md'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'下面是event参数，event参数的类型，filename'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> event<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// node.md</span>\\n<span class=\\\"token comment\\\">// 这里修改了监听的node.md文件</span>\\n<span class=\\\"token keyword\\\">this</span> is dog<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token comment\\\">// console</span>\\n<span class=\\\"token comment\\\">// 执行结果</span>\\n下面是event参数，event参数的类型，filename\\nchange\\nstring\\nnode<span class=\\\"token punctuation\\\">.</span>md\\n<span class=\\\"token comment\\\">// node.md => node1.md</span>\\n<span class=\\\"token comment\\\">// 修改文件的名字</span>\\n<span class=\\\"token comment\\\">// console</span>\\n<span class=\\\"token comment\\\">// 执行结果</span>\\n下面是event参数，event参数的类型，filename\\nrename\\nstring\\nnode1<span class=\\\"token punctuation\\\">.</span>md\\n</code></pre>\\n      </div>\\n<p>注意事项： <code>fs.watch</code>并不是跨所有平台的，在某些常见下不一定可用。 第二个参数中的布尔值<code>recursive</code>只在<code>osx</code>和<code>window</code>下可以使用。</p>\\n<h2>可用性</h2>\\n<ul>\\n<li><code>fs.watch</code>依赖于操作系统底层模块，由操作系统底层模块通知Node文件的变化。</li>\\n<li>如果某个操作系统底层模块对于文件的监听本身就有问题，那么<code>fs.watch</code>是无法发挥作用的，比如监听了一些不可靠的目录和文件，网络文件系统，虚拟机系统中的文件。</li>\\n<li>在<code>Linux</code>，<code>osx</code>系统中，<code>fs.watch</code>解析路径成一个索引节点，并且监听这个节点，但是如果监听的节点被删除或者重新创建，那么此时它就成了一个新节点了，<code>watch</code>将会发送一个<code>delete</code>事件，但是仍然监听原来的节点，原来的事件不会响应新节点的改变，这种处理是符合预期的。</li>\\n<li><code>filename</code>参数只支持在<code>Linux</code>和<code>windows</code>上面指定(<code>osx</code>也可以，但是有些情况可能会有异常)，事实上，即便是在可以使用的平台上，也不建议直接使用这个参数，因为在回调函数内部，建议增加一些逻辑判断，看一下<code>filename</code>是否为<code>null</code>，如下面的例子：</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'somedir'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">,</span> filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`event is: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>event<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n         console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`filename provided: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>filename<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n         console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'filename not provided'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Node文件系统\",\"date\":\"2016-10-01\",\"tags\":[\"Node\",\"JS\"]}}},\"pathContext\":{\"slug\":\"/2016-10-01---node-file-system/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-2016-10-01-node-file-system.json\n// module id = 477\n// module chunks = 110826550075370"],"sourceRoot":""}