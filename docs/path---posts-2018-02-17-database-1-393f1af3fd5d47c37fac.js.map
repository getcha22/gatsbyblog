{"version":3,"sources":["webpack:///path---posts-2018-02-17-database-1-393f1af3fd5d47c37fac.js","webpack:///./.cache/json/posts-2018-02-17-database-1.json"],"names":["webpackJsonp","490","module","exports","data","markdownRemark","html","frontmatter","title","date","tags","pathContext","slug"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAgujCC,aAAsoCC,MAAA,WAAAC,KAAA,aAAAC,MAAA,kBAAgEC,aAAgBC,KAAA","file":"path---posts-2018-02-17-database-1-393f1af3fd5d47c37fac.js","sourcesContent":["webpackJsonp([4978366234524],{\n\n/***/ 490:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>数据库学习（一）(待续)</h1>\\n<p>选择默认数据库(在MySQL中，<code>schema</code>是与<code>database</code>类似的概念)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">use</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">database</span> name<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token comment\\\"># 0 row(s) affected</span>\\n</code></pre>\\n      </div>\\n<h2>基本表</h2>\\n<ul>\\n<li>创建基本表</li>\\n<li>修改基本表</li>\\n</ul>\\n<h3>创建基本表</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">table</span> test_table<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>列名<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">&lt;</span>类型<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">[</span>列级完整性约束条件<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    id char<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span><span class=\\\"token punctuation\\\">,</span>\\n    name char<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">40</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">NOT</span> <span class=\\\"token boolean\\\">NULL</span><span class=\\\"token punctuation\\\">,</span>\\n    age <span class=\\\"token keyword\\\">smallint</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 0 row(s) affected</span>\\n</code></pre>\\n      </div>\\n<h3>修改基本表</h3>\\n<p>表名：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    <span class=\\\"token keyword\\\">rename</span> <span class=\\\"token keyword\\\">to</span> testtable<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>针对于列的增加，删除，修改数据类型或者列名，在删除列的时候，可以依据在被其他对象引用时是否直接删除做<code>[cascade|restrict]</code>的设置，下面的每个分号完成一个操作</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\"># 增加列</span>\\n<span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    <span class=\\\"token keyword\\\">add</span> <span class=\\\"token keyword\\\">column</span> sex <span class=\\\"token keyword\\\">smallint</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 删除列</span>\\n<span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    <span class=\\\"token keyword\\\">drop</span> <span class=\\\"token keyword\\\">column</span> sex <span class=\\\"token keyword\\\">cascade</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 修改列名与数据类型</span>\\n<span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    change <span class=\\\"token keyword\\\">column</span> sex sex_changed char<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    change <span class=\\\"token keyword\\\">column</span> sex_changed sex char<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 当列名不变时，可以用来修改数据类型</span>\\n<span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    change <span class=\\\"token keyword\\\">column</span> sex sex char<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>表级完整性约束有<code>primary key|unique|foreign key</code>，<code>not null</code>约束只能在列级定义。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> testtable <span class=\\\"token comment\\\"># 每行代码之前都有有它，这里为了整洁</span>\\n\\n<span class=\\\"token comment\\\">--------增加--------</span>\\n    <span class=\\\"token comment\\\"># 唯一性约束</span>\\n    <span class=\\\"token keyword\\\">add</span> <span class=\\\"token keyword\\\">constraint</span> <span class=\\\"token keyword\\\">unique</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\"># 实体完整性约束</span>\\n    <span class=\\\"token keyword\\\">add</span> <span class=\\\"token keyword\\\">constraint</span> <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span> <span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\"># 增加外键，指定了外键名，后续可用于修改删除</span>\\n    <span class=\\\"token keyword\\\">add</span> <span class=\\\"token keyword\\\">constraint</span> fk_name <span class=\\\"token keyword\\\">foreign</span> <span class=\\\"token keyword\\\">key</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">references</span> testtable<span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\"># 增加外键，但没有指定了外键名</span>\\n    <span class=\\\"token keyword\\\">add</span> <span class=\\\"token keyword\\\">constraint</span> <span class=\\\"token keyword\\\">foreign</span> <span class=\\\"token keyword\\\">key</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">references</span> testtable<span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token comment\\\">--------删除--------</span>\\n    <span class=\\\"token comment\\\"># 删除唯一性约束，需要才index入手，先不整理</span>\\n    <span class=\\\"token comment\\\"># 删掉完整性约束</span>\\n    <span class=\\\"token keyword\\\">drop</span> <span class=\\\"token keyword\\\">foreign</span> <span class=\\\"token keyword\\\">key</span> fk_name<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\"># 删掉主键，主键只有一个，不需要指定主键名了</span>\\n    <span class=\\\"token keyword\\\">drop</span> <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>数据查询</h2>\\n<ul>\\n<li>列查询</li>\\n<li>查询结果中的若干行</li>\\n<li>排序</li>\\n</ul>\\n<h3>列查询</h3>\\n<p>查询单列，多列，全部列</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\">--------查询单列--------</span>\\n<span class=\\\"token keyword\\\">select</span> Sno <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># MySQL当真是对于表名，属性名，都不区分大小写啊，下面三个都返回了同样结果</span>\\n<span class=\\\"token keyword\\\">select</span> sagE <span class=\\\"token keyword\\\">from</span> Student<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">select</span> sagE <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">select</span> sAGE <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">--------查询多列--------</span>\\n<span class=\\\"token comment\\\"># 结果中各个列的先后顺序与查询句内属性的顺序相同，不需要因为这个问题纠结过多，因为很少会将查询结果不做任何处理，直接展示在前端</span>\\n<span class=\\\"token keyword\\\">select</span> Sno<span class=\\\"token punctuation\\\">,</span> Sage <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">--------查询所有列-------</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>查询结果中，可能会有多行是相同的，使用<code>distinct</code>关键字可以告诉DBMS去重：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token keyword\\\">distinct</span> Sage <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 留意distinct会在查询结果中，某几行全部属性都相同时才起作用，仅仅一个属性重复时，distinct是无视的</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token keyword\\\">distinct</span> Sage<span class=\\\"token punctuation\\\">,</span> Sname <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>select [distinct|all]</code>之后的，其实跟着的是一个目标列表达式，除了是表中的属性名，还可以是计算表达式，函数。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\">--------计算表达式--------</span>\\n<span class=\\\"token comment\\\"># 结果的列名为2018-Sage，值为计算后的结果</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token keyword\\\">distinct</span> Sno<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2018</span><span class=\\\"token operator\\\">-</span>Sage <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">--------函数--------</span>\\n<span class=\\\"token comment\\\"># 结果的列名为hex(Sage)，值为对应的16进制转换</span>\\n<span class=\\\"token keyword\\\">select</span> Sname<span class=\\\"token punctuation\\\">,</span> Sage<span class=\\\"token punctuation\\\">,</span> hex<span class=\\\"token punctuation\\\">(</span>Sage<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 结果的列名为lower(Sdept)，值为对应的小写字母</span>\\n<span class=\\\"token keyword\\\">select</span> Sname<span class=\\\"token punctuation\\\">,</span> Sage<span class=\\\"token punctuation\\\">,</span> lower<span class=\\\"token punctuation\\\">(</span>Sdept<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>查询结果中的若干行</h3>\\n<p><code>where</code>子句可以设置查询结果中元组要满足的条件，达到过滤数据的目的</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\"># 获得成年人的信息</span>\\n<span class=\\\"token keyword\\\">select</span> Sname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2018</span><span class=\\\"token operator\\\">-</span>Sage<span class=\\\"token punctuation\\\">,</span> Sage <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>元组需要满足的条件可以通过很多渠道设置，上面的<code>></code>就是其中之一，在这里它也叫做谓词，谓词的作用就是“判断是否存在满足某种条件的元组”。如果存在这样的元组就返回真（TRUE），如果不存在就返回假（FALSE）。留意查询条件一定要写在<code>where</code>子句中</p>\\n<h4>比较判断</h4>\\n<p>所有人都知道的，<code>&#x3C;</code>就是其中之一，<code>&#x3C;,>,&#x3C;=,>=,=,!=,&#x3C;></code>这些都是。需要注意的是，mysql可没有这些东西 <code>!>,!&#x3C;,!&#x3C;=,!>=,not+...</code>，<code>&#x3C;></code>是有的，就是不等于。</p>\\n<h4>部分一致查询</h4>\\n<p>有点像超级弱化版的正则表达式，用<code>like</code>, <code>not like</code>作为关键字，只有两个通配符，<code>%</code>和<code>_</code>。</p>\\n<ul>\\n<li><code>%</code>匹配任意多个位置（包括一个位置也没有），<code>ab</code>是目标串，<code>a%b</code>为模式串,<code>ab</code>之间没有位置，也会被匹配到</li>\\n<li><code>_</code>仅仅匹配一个位置，要匹配几个位置就重复写几次</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\"># 所有姓郝的学生</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> sname <span class=\\\"token operator\\\">like</span> <span class=\\\"token string\\\">'郝%'</span>\\n<span class=\\\"token comment\\\"># 所有第二个字为翔的学生</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> sname <span class=\\\"token operator\\\">like</span> <span class=\\\"token string\\\">'_翔%'</span>\\n</code></pre>\\n      </div>\\n<p>如果需要匹配的字符串中含有<code>%</code>或者<code>_</code>，使用<code>\\\\</code>转义即可</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\"># _开头的家庭作业名</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> homework_name <span class=\\\"token operator\\\">like</span> <span class=\\\"token string\\\">'\\\\_%'</span> \\n</code></pre>\\n      </div>\\n<h4>范围查询</h4>\\n<p>判断属性在什么范围内，使用<code>between and</code>, <code>not between and</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">between</span> <span class=\\\"token number\\\">15</span> <span class=\\\"token operator\\\">and</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>空值判断</h4>\\n<p><code>is null</code>可以取出目标列的存在空值的所属元祖，<code>is not null</code>与之相反。</p>\\n<h4>确定所属集合</h4>\\n<p><code>in</code>、<code>not in</code>用来指定属性值需要满足的集合，不是范围。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">not</span> <span class=\\\"token operator\\\">in</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">17</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>叠加大法</h4>\\n<p>以上五种查询条件，每个又可以看做一个分句，使用<code>AND</code>，<code>OR</code>可以将它们叠加，注意<code>AND</code>的优先级高于<code>OR</code>（可以使用括号改变优先级），当然也可以不必这么费脑子想如何叠加，直接嵌套子句也不错，发挥SQL的特点。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">and</span> Sname <span class=\\\"token operator\\\">like</span><span class=\\\"token string\\\">'李_'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>在查询语句的最末，可以跟着一个<code>order by &#x3C;列名> [desc]</code>子句，用来对最终的结果排序。默认为升序，越到表尾越大，在列名后跟上关键字<code>desc</code>(descent)可以指定降序。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">10</span> <span class=\\\"token keyword\\\">order</span> <span class=\\\"token keyword\\\">by</span> Sage<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">10</span> <span class=\\\"token keyword\\\">order</span> <span class=\\\"token keyword\\\">by</span> Sage <span class=\\\"token keyword\\\">desc</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>聚集分组</h3>\\n<p>聚集分组是两个内容，先看聚集</p>\\n<h4>聚集函数</h4>\\n<p>类似于<code>count()</code>，<code>sum()</code>，<code>avg()</code>，<code>max()</code>，<code>min()</code>这样的函数称为聚集函数，可以用来非常方便的统计数据，叫聚集函数，我猜测是因为这面的特性：</p>\\n<p>先看看现在有什么</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>基本表中的内容如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+--------+------+-------+------+\\n<span class=\\\"token operator\\\">|</span> Sno       <span class=\\\"token operator\\\">|</span> Sname  <span class=\\\"token operator\\\">|</span> Ssex <span class=\\\"token operator\\\">|</span> Sdept <span class=\\\"token operator\\\">|</span> Sage <span class=\\\"token operator\\\">|</span>\\n+-----------+--------+------+-------+------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 李勇   <span class=\\\"token operator\\\">|</span> 男   <span class=\\\"token operator\\\">|</span> CS    <span class=\\\"token operator\\\">|</span>   20 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 刘晨   <span class=\\\"token operator\\\">|</span> 女   <span class=\\\"token operator\\\">|</span> CS    <span class=\\\"token operator\\\">|</span>   19 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215123 <span class=\\\"token operator\\\">|</span> 王敏   <span class=\\\"token operator\\\">|</span> 女   <span class=\\\"token operator\\\">|</span> MA    <span class=\\\"token operator\\\">|</span>   18 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215125 <span class=\\\"token operator\\\">|</span> 张立   <span class=\\\"token operator\\\">|</span> 男   <span class=\\\"token operator\\\">|</span> IS    <span class=\\\"token operator\\\">|</span>   19 <span class=\\\"token operator\\\">|</span>\\n+-----------+--------+------+-------+------+\\n4 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>使用聚集函数统计结果中的人数</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token function\\\">count</span><span class=\\\"token punctuation\\\">(</span>Sno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>返回结果显示4个人</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+------------+\\n<span class=\\\"token operator\\\">|</span> count<span class=\\\"token punctuation\\\">(</span>Sno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span>\\n+------------+\\n<span class=\\\"token operator\\\">|</span>          4 <span class=\\\"token operator\\\">|</span>\\n+------------+\\n1 row <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>下面的查询语句，猜猜会返回什么？<code>count(Sno)</code>的结果上面就有，一行一列，值为4。<code>Sname</code>这一列呢？按理说应该是一列四行，但这有些奇怪啊，一行与四行怎么组合...</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token function\\\">count</span><span class=\\\"token punctuation\\\">(</span>Sno<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> Sname <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>看看结果吧，左边由于聚集函数，现在聚集成了一行，值为学生的数量4，属性名是<code>count(Sno)</code>。右边本该是四行，现在只有一行，值是<code>201215122</code>，也就是第一个学生的学号。\\n多的迁就了少的，不是少的复制多次迎合多的。</p>\\n<p>如果用在<code>select</code>中，聚集函数还是单独用吧（<code>select count(Sno) from student;</code>），别和属性名放在一起用了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+------------+-----------+\\n<span class=\\\"token operator\\\">|</span> count<span class=\\\"token punctuation\\\">(</span>Sno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span> sno       <span class=\\\"token operator\\\">|</span>\\n+------------+-----------+\\n<span class=\\\"token operator\\\">|</span>          4 <span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span>\\n+------------+-----------+\\n1 row <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>分组</h4>\\n<p>聚集分组是一对好基友，两者结合起来，就很滋润了。上面的查询中，我们聚集的对象是全部查询结果，现在使用分组子句，可以细化聚集函数的作用对象。分组子句可以跟着<code>where</code>子句之后。作用分组子句后，相同列名的元组被分为一组，每组分别作用<code>having</code>子句中的表达式</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">where</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">column</span> name<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">having</span> <span class=\\\"token operator\\\">&lt;</span>条件表达式<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">]</span> \\n</code></pre>\\n      </div>\\n<p>下面的查询语句将<code>sc</code>表按照<code>Sno</code>属性分组，展示每组的<code>sno</code>，<code>avg(grade)</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">avg</span><span class=\\\"token punctuation\\\">(</span>grade<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>当然也可以按照多个属性分组</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> grade <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno<span class=\\\"token punctuation\\\">,</span> grade<span class=\\\"token punctuation\\\">;</span> \\n</code></pre>\\n      </div>\\n<p>增加<code>having</code>短语，<code>having</code>短语的作用类似与<code>where</code>子句，用来过滤分组后的每个组内的元祖，判断每个组元组的最小成绩是否大于60，若大于60，再通过<code>select</code>选择每组的编号<code>sno</code>和<code>avg(grade)</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">avg</span><span class=\\\"token punctuation\\\">(</span>grade<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno <span class=\\\"token keyword\\\">having</span> <span class=\\\"token function\\\">min</span><span class=\\\"token punctuation\\\">(</span>grade<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">60</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>多此一举的试试</h4>\\n<p>多此一举的试试，如果将<code>avg(grade)</code>改为<code>grade</code>会怎么样，按照<code>sno</code>分组，自然每个组都是具有相同的<code>sno</code>属性，那么结果是将<code>sno</code>重复多次，<code>sno</code>的右侧对应着每个成绩？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> grade <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>结果是<code>sno</code>仅出现了一次，右侧的<code>grade</code>列仅仅展示拥有同一<code>sno</code>属性的第一个元组的<code>grade</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> sno       <span class=\\\"token operator\\\">|</span> grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span>    90 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201216121 <span class=\\\"token operator\\\">|</span>    85 <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n3 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>注意点</h4>\\n<p>在<code>where</code>子句中，不能出现聚集函数，<code>having</code>中可以用在非分组属性之上</p>\\n<p>在<code>having</code>语句中，可以使用<code>where</code>子句的六种过滤方法，但这六种方法只能用在作为分组的属性之上，比如下面强行凑出的例子，按照<code>sno</code>分组后（<code>Sno</code>即是分组属性），可以通过范围过滤，得到学号<code>100000000</code>到学号<code>300000000</code>同学的课程最高成绩：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>grade<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno <span class=\\\"token keyword\\\">having</span> sno <span class=\\\"token operator\\\">between</span> <span class=\\\"token number\\\">100000000</span> <span class=\\\"token operator\\\">and</span> <span class=\\\"token number\\\">300000000</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>若将这六种方法作用在非分组属性上，就会出问题，having判断的对象就是相同<code>sno</code>属性的第一个元组的属性，对于下面这个表</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> Sno       <span class=\\\"token operator\\\">|</span> Cno <span class=\\\"token operator\\\">|</span> Grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 1   <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    90 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201216121 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    85 <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n5 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p><code>grade</code>不是分组属性，上面已经提到，如果没有聚集函数的话，会只显示各分组的第一个元组对应的属性值</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> grade <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> sno       <span class=\\\"token operator\\\">|</span> grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201216121 <span class=\\\"token operator\\\">|</span>    85 <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n3 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>对非分组属性使用<code>having</code>子句。猜猜结果，使用<code>sno</code>作为分组属性，分成多组，<code>having</code>的作用对象为每个组，难道是判断每组中是否有元组的<code>grade</code>值在<code>90</code>到<code>98</code>？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> grade <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno <span class=\\\"token keyword\\\">having</span> grade <span class=\\\"token operator\\\">between</span> <span class=\\\"token number\\\">90</span> <span class=\\\"token operator\\\">and</span> <span class=\\\"token number\\\">98</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>看看结果，<code>sno</code>对应的<code>grade</code>值有<code>80</code>，<code>90</code>，有<code>grade</code>值在<code>90</code>到<code>98</code>，但结果的<code>sno</code>中却没有它，猜想失败了，会不会过滤条件在非分组属性时，仅仅作用于第一个值？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> sno       <span class=\\\"token operator\\\">|</span> grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n1 row <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>调换<code>sc</code>表中<code>201215122</code>对应的两个<code>grade</code>的值</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> Sno       <span class=\\\"token operator\\\">|</span> Cno <span class=\\\"token operator\\\">|</span> Grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 1   <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    90 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201216121 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    85 <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n5 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n\\n-------修改后--------\\n\\n+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> Sno       <span class=\\\"token operator\\\">|</span> Cno <span class=\\\"token operator\\\">|</span> Grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 1   <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    90 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201216121 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    85 <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n5 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>重新查询一次</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> grade <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno <span class=\\\"token keyword\\\">having</span> grade <span class=\\\"token operator\\\">between</span> <span class=\\\"token number\\\">90</span> <span class=\\\"token operator\\\">and</span> <span class=\\\"token number\\\">98</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>果然如此，在<code>having</code>中过滤非分组属性时，由于它有多个，便默认只对同组内的第一个元组作用过滤条件</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> sno       <span class=\\\"token operator\\\">|</span> grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span>    90 <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n2 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>总结一下：</p>\\n<p><code>having</code>和<code>where</code>非常像，都可以用来过滤元组，<code>where</code>子句的判断对象是所有元组，而<code>having</code>的判断对象</p>\\n<ul>\\n<li>分组属性，按照它分组后的，该组内所有的分组属性的属性值都是相同的，取它进行是否满足过滤条件</li>\\n<li>非分组属性，按照分组属性分组后，非分组属性内的属性组一般是不同的，取组内的第一个对应属性值来判断是否满足过滤条件。</li>\\n</ul>\",\"frontmatter\":{\"title\":\"数据库学习（一）\",\"date\":\"2018-02-17\",\"tags\":[\"MySQL\",\"SQL\"]}}},\"pathContext\":{\"slug\":\"/2018-02-17---database-1/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-2018-02-17-database-1-393f1af3fd5d47c37fac.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>数据库学习（一）(待续)</h1>\\n<p>选择默认数据库(在MySQL中，<code>schema</code>是与<code>database</code>类似的概念)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">use</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">database</span> name<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token comment\\\"># 0 row(s) affected</span>\\n</code></pre>\\n      </div>\\n<h2>基本表</h2>\\n<ul>\\n<li>创建基本表</li>\\n<li>修改基本表</li>\\n</ul>\\n<h3>创建基本表</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">create</span> <span class=\\\"token keyword\\\">table</span> test_table<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>列名<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">&lt;</span>类型<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">[</span>列级完整性约束条件<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    id char<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span><span class=\\\"token punctuation\\\">,</span>\\n    name char<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">40</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">NOT</span> <span class=\\\"token boolean\\\">NULL</span><span class=\\\"token punctuation\\\">,</span>\\n    age <span class=\\\"token keyword\\\">smallint</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 0 row(s) affected</span>\\n</code></pre>\\n      </div>\\n<h3>修改基本表</h3>\\n<p>表名：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    <span class=\\\"token keyword\\\">rename</span> <span class=\\\"token keyword\\\">to</span> testtable<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>针对于列的增加，删除，修改数据类型或者列名，在删除列的时候，可以依据在被其他对象引用时是否直接删除做<code>[cascade|restrict]</code>的设置，下面的每个分号完成一个操作</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\"># 增加列</span>\\n<span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    <span class=\\\"token keyword\\\">add</span> <span class=\\\"token keyword\\\">column</span> sex <span class=\\\"token keyword\\\">smallint</span> <span class=\\\"token operator\\\">not</span> <span class=\\\"token boolean\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 删除列</span>\\n<span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    <span class=\\\"token keyword\\\">drop</span> <span class=\\\"token keyword\\\">column</span> sex <span class=\\\"token keyword\\\">cascade</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 修改列名与数据类型</span>\\n<span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    change <span class=\\\"token keyword\\\">column</span> sex sex_changed char<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    change <span class=\\\"token keyword\\\">column</span> sex_changed sex char<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 当列名不变时，可以用来修改数据类型</span>\\n<span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> test_table\\n    change <span class=\\\"token keyword\\\">column</span> sex sex char<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>表级完整性约束有<code>primary key|unique|foreign key</code>，<code>not null</code>约束只能在列级定义。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">alter</span> <span class=\\\"token keyword\\\">table</span> testtable <span class=\\\"token comment\\\"># 每行代码之前都有有它，这里为了整洁</span>\\n\\n<span class=\\\"token comment\\\">--------增加--------</span>\\n    <span class=\\\"token comment\\\"># 唯一性约束</span>\\n    <span class=\\\"token keyword\\\">add</span> <span class=\\\"token keyword\\\">constraint</span> <span class=\\\"token keyword\\\">unique</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\"># 实体完整性约束</span>\\n    <span class=\\\"token keyword\\\">add</span> <span class=\\\"token keyword\\\">constraint</span> <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span> <span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\"># 增加外键，指定了外键名，后续可用于修改删除</span>\\n    <span class=\\\"token keyword\\\">add</span> <span class=\\\"token keyword\\\">constraint</span> fk_name <span class=\\\"token keyword\\\">foreign</span> <span class=\\\"token keyword\\\">key</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">references</span> testtable<span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\"># 增加外键，但没有指定了外键名</span>\\n    <span class=\\\"token keyword\\\">add</span> <span class=\\\"token keyword\\\">constraint</span> <span class=\\\"token keyword\\\">foreign</span> <span class=\\\"token keyword\\\">key</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">references</span> testtable<span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token comment\\\">--------删除--------</span>\\n    <span class=\\\"token comment\\\"># 删除唯一性约束，需要才index入手，先不整理</span>\\n    <span class=\\\"token comment\\\"># 删掉完整性约束</span>\\n    <span class=\\\"token keyword\\\">drop</span> <span class=\\\"token keyword\\\">foreign</span> <span class=\\\"token keyword\\\">key</span> fk_name<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\"># 删掉主键，主键只有一个，不需要指定主键名了</span>\\n    <span class=\\\"token keyword\\\">drop</span> <span class=\\\"token keyword\\\">primary</span> <span class=\\\"token keyword\\\">key</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>数据查询</h2>\\n<ul>\\n<li>列查询</li>\\n<li>查询结果中的若干行</li>\\n<li>排序</li>\\n</ul>\\n<h3>列查询</h3>\\n<p>查询单列，多列，全部列</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\">--------查询单列--------</span>\\n<span class=\\\"token keyword\\\">select</span> Sno <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># MySQL当真是对于表名，属性名，都不区分大小写啊，下面三个都返回了同样结果</span>\\n<span class=\\\"token keyword\\\">select</span> sagE <span class=\\\"token keyword\\\">from</span> Student<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">select</span> sagE <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">select</span> sAGE <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">--------查询多列--------</span>\\n<span class=\\\"token comment\\\"># 结果中各个列的先后顺序与查询句内属性的顺序相同，不需要因为这个问题纠结过多，因为很少会将查询结果不做任何处理，直接展示在前端</span>\\n<span class=\\\"token keyword\\\">select</span> Sno<span class=\\\"token punctuation\\\">,</span> Sage <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">--------查询所有列-------</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>查询结果中，可能会有多行是相同的，使用<code>distinct</code>关键字可以告诉DBMS去重：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token keyword\\\">distinct</span> Sage <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 留意distinct会在查询结果中，某几行全部属性都相同时才起作用，仅仅一个属性重复时，distinct是无视的</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token keyword\\\">distinct</span> Sage<span class=\\\"token punctuation\\\">,</span> Sname <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>select [distinct|all]</code>之后的，其实跟着的是一个目标列表达式，除了是表中的属性名，还可以是计算表达式，函数。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\">--------计算表达式--------</span>\\n<span class=\\\"token comment\\\"># 结果的列名为2018-Sage，值为计算后的结果</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token keyword\\\">distinct</span> Sno<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2018</span><span class=\\\"token operator\\\">-</span>Sage <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">--------函数--------</span>\\n<span class=\\\"token comment\\\"># 结果的列名为hex(Sage)，值为对应的16进制转换</span>\\n<span class=\\\"token keyword\\\">select</span> Sname<span class=\\\"token punctuation\\\">,</span> Sage<span class=\\\"token punctuation\\\">,</span> hex<span class=\\\"token punctuation\\\">(</span>Sage<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># 结果的列名为lower(Sdept)，值为对应的小写字母</span>\\n<span class=\\\"token keyword\\\">select</span> Sname<span class=\\\"token punctuation\\\">,</span> Sage<span class=\\\"token punctuation\\\">,</span> lower<span class=\\\"token punctuation\\\">(</span>Sdept<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>查询结果中的若干行</h3>\\n<p><code>where</code>子句可以设置查询结果中元组要满足的条件，达到过滤数据的目的</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\"># 获得成年人的信息</span>\\n<span class=\\\"token keyword\\\">select</span> Sname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2018</span><span class=\\\"token operator\\\">-</span>Sage<span class=\\\"token punctuation\\\">,</span> Sage <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>元组需要满足的条件可以通过很多渠道设置，上面的<code>></code>就是其中之一，在这里它也叫做谓词，谓词的作用就是“判断是否存在满足某种条件的元组”。如果存在这样的元组就返回真（TRUE），如果不存在就返回假（FALSE）。留意查询条件一定要写在<code>where</code>子句中</p>\\n<h4>比较判断</h4>\\n<p>所有人都知道的，<code>&#x3C;</code>就是其中之一，<code>&#x3C;,>,&#x3C;=,>=,=,!=,&#x3C;></code>这些都是。需要注意的是，mysql可没有这些东西 <code>!>,!&#x3C;,!&#x3C;=,!>=,not+...</code>，<code>&#x3C;></code>是有的，就是不等于。</p>\\n<h4>部分一致查询</h4>\\n<p>有点像超级弱化版的正则表达式，用<code>like</code>, <code>not like</code>作为关键字，只有两个通配符，<code>%</code>和<code>_</code>。</p>\\n<ul>\\n<li><code>%</code>匹配任意多个位置（包括一个位置也没有），<code>ab</code>是目标串，<code>a%b</code>为模式串,<code>ab</code>之间没有位置，也会被匹配到</li>\\n<li><code>_</code>仅仅匹配一个位置，要匹配几个位置就重复写几次</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\"># 所有姓郝的学生</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> sname <span class=\\\"token operator\\\">like</span> <span class=\\\"token string\\\">'郝%'</span>\\n<span class=\\\"token comment\\\"># 所有第二个字为翔的学生</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> sname <span class=\\\"token operator\\\">like</span> <span class=\\\"token string\\\">'_翔%'</span>\\n</code></pre>\\n      </div>\\n<p>如果需要匹配的字符串中含有<code>%</code>或者<code>_</code>，使用<code>\\\\</code>转义即可</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token comment\\\"># _开头的家庭作业名</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> homework_name <span class=\\\"token operator\\\">like</span> <span class=\\\"token string\\\">'\\\\_%'</span> \\n</code></pre>\\n      </div>\\n<h4>范围查询</h4>\\n<p>判断属性在什么范围内，使用<code>between and</code>, <code>not between and</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">between</span> <span class=\\\"token number\\\">15</span> <span class=\\\"token operator\\\">and</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>空值判断</h4>\\n<p><code>is null</code>可以取出目标列的存在空值的所属元祖，<code>is not null</code>与之相反。</p>\\n<h4>确定所属集合</h4>\\n<p><code>in</code>、<code>not in</code>用来指定属性值需要满足的集合，不是范围。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">not</span> <span class=\\\"token operator\\\">in</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">17</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>叠加大法</h4>\\n<p>以上五种查询条件，每个又可以看做一个分句，使用<code>AND</code>，<code>OR</code>可以将它们叠加，注意<code>AND</code>的优先级高于<code>OR</code>（可以使用括号改变优先级），当然也可以不必这么费脑子想如何叠加，直接嵌套子句也不错，发挥SQL的特点。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">and</span> Sname <span class=\\\"token operator\\\">like</span><span class=\\\"token string\\\">'李_'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>在查询语句的最末，可以跟着一个<code>order by &#x3C;列名> [desc]</code>子句，用来对最终的结果排序。默认为升序，越到表尾越大，在列名后跟上关键字<code>desc</code>(descent)可以指定降序。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">10</span> <span class=\\\"token keyword\\\">order</span> <span class=\\\"token keyword\\\">by</span> Sage<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">select</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">from</span> student <span class=\\\"token keyword\\\">where</span> Sage <span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">10</span> <span class=\\\"token keyword\\\">order</span> <span class=\\\"token keyword\\\">by</span> Sage <span class=\\\"token keyword\\\">desc</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>聚集分组</h3>\\n<p>聚集分组是两个内容，先看聚集</p>\\n<h4>聚集函数</h4>\\n<p>类似于<code>count()</code>，<code>sum()</code>，<code>avg()</code>，<code>max()</code>，<code>min()</code>这样的函数称为聚集函数，可以用来非常方便的统计数据，叫聚集函数，我猜测是因为这面的特性：</p>\\n<p>先看看现在有什么</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>基本表中的内容如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+--------+------+-------+------+\\n<span class=\\\"token operator\\\">|</span> Sno       <span class=\\\"token operator\\\">|</span> Sname  <span class=\\\"token operator\\\">|</span> Ssex <span class=\\\"token operator\\\">|</span> Sdept <span class=\\\"token operator\\\">|</span> Sage <span class=\\\"token operator\\\">|</span>\\n+-----------+--------+------+-------+------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 李勇   <span class=\\\"token operator\\\">|</span> 男   <span class=\\\"token operator\\\">|</span> CS    <span class=\\\"token operator\\\">|</span>   20 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 刘晨   <span class=\\\"token operator\\\">|</span> 女   <span class=\\\"token operator\\\">|</span> CS    <span class=\\\"token operator\\\">|</span>   19 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215123 <span class=\\\"token operator\\\">|</span> 王敏   <span class=\\\"token operator\\\">|</span> 女   <span class=\\\"token operator\\\">|</span> MA    <span class=\\\"token operator\\\">|</span>   18 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215125 <span class=\\\"token operator\\\">|</span> 张立   <span class=\\\"token operator\\\">|</span> 男   <span class=\\\"token operator\\\">|</span> IS    <span class=\\\"token operator\\\">|</span>   19 <span class=\\\"token operator\\\">|</span>\\n+-----------+--------+------+-------+------+\\n4 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>使用聚集函数统计结果中的人数</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token function\\\">count</span><span class=\\\"token punctuation\\\">(</span>Sno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>返回结果显示4个人</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+------------+\\n<span class=\\\"token operator\\\">|</span> count<span class=\\\"token punctuation\\\">(</span>Sno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span>\\n+------------+\\n<span class=\\\"token operator\\\">|</span>          4 <span class=\\\"token operator\\\">|</span>\\n+------------+\\n1 row <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>下面的查询语句，猜猜会返回什么？<code>count(Sno)</code>的结果上面就有，一行一列，值为4。<code>Sname</code>这一列呢？按理说应该是一列四行，但这有些奇怪啊，一行与四行怎么组合...</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> <span class=\\\"token function\\\">count</span><span class=\\\"token punctuation\\\">(</span>Sno<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> Sname <span class=\\\"token keyword\\\">from</span> student<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>看看结果吧，左边由于聚集函数，现在聚集成了一行，值为学生的数量4，属性名是<code>count(Sno)</code>。右边本该是四行，现在只有一行，值是<code>201215122</code>，也就是第一个学生的学号。\\n多的迁就了少的，不是少的复制多次迎合多的。</p>\\n<p>如果用在<code>select</code>中，聚集函数还是单独用吧（<code>select count(Sno) from student;</code>），别和属性名放在一起用了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+------------+-----------+\\n<span class=\\\"token operator\\\">|</span> count<span class=\\\"token punctuation\\\">(</span>Sno<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span> sno       <span class=\\\"token operator\\\">|</span>\\n+------------+-----------+\\n<span class=\\\"token operator\\\">|</span>          4 <span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span>\\n+------------+-----------+\\n1 row <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>分组</h4>\\n<p>聚集分组是一对好基友，两者结合起来，就很滋润了。上面的查询中，我们聚集的对象是全部查询结果，现在使用分组子句，可以细化聚集函数的作用对象。分组子句可以跟着<code>where</code>子句之后。作用分组子句后，相同列名的元组被分为一组，每组分别作用<code>having</code>子句中的表达式</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">where</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">column</span> name<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">having</span> <span class=\\\"token operator\\\">&lt;</span>条件表达式<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">]</span> \\n</code></pre>\\n      </div>\\n<p>下面的查询语句将<code>sc</code>表按照<code>Sno</code>属性分组，展示每组的<code>sno</code>，<code>avg(grade)</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">avg</span><span class=\\\"token punctuation\\\">(</span>grade<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>当然也可以按照多个属性分组</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> grade <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno<span class=\\\"token punctuation\\\">,</span> grade<span class=\\\"token punctuation\\\">;</span> \\n</code></pre>\\n      </div>\\n<p>增加<code>having</code>短语，<code>having</code>短语的作用类似与<code>where</code>子句，用来过滤分组后的每个组内的元祖，判断每个组元组的最小成绩是否大于60，若大于60，再通过<code>select</code>选择每组的编号<code>sno</code>和<code>avg(grade)</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">avg</span><span class=\\\"token punctuation\\\">(</span>grade<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno <span class=\\\"token keyword\\\">having</span> <span class=\\\"token function\\\">min</span><span class=\\\"token punctuation\\\">(</span>grade<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">60</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>多此一举的试试</h4>\\n<p>多此一举的试试，如果将<code>avg(grade)</code>改为<code>grade</code>会怎么样，按照<code>sno</code>分组，自然每个组都是具有相同的<code>sno</code>属性，那么结果是将<code>sno</code>重复多次，<code>sno</code>的右侧对应着每个成绩？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> grade <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>结果是<code>sno</code>仅出现了一次，右侧的<code>grade</code>列仅仅展示拥有同一<code>sno</code>属性的第一个元组的<code>grade</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> sno       <span class=\\\"token operator\\\">|</span> grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span>    90 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201216121 <span class=\\\"token operator\\\">|</span>    85 <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n3 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>注意点</h4>\\n<p>在<code>where</code>子句中，不能出现聚集函数，<code>having</code>中可以用在非分组属性之上</p>\\n<p>在<code>having</code>语句中，可以使用<code>where</code>子句的六种过滤方法，但这六种方法只能用在作为分组的属性之上，比如下面强行凑出的例子，按照<code>sno</code>分组后（<code>Sno</code>即是分组属性），可以通过范围过滤，得到学号<code>100000000</code>到学号<code>300000000</code>同学的课程最高成绩：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>grade<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno <span class=\\\"token keyword\\\">having</span> sno <span class=\\\"token operator\\\">between</span> <span class=\\\"token number\\\">100000000</span> <span class=\\\"token operator\\\">and</span> <span class=\\\"token number\\\">300000000</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>若将这六种方法作用在非分组属性上，就会出问题，having判断的对象就是相同<code>sno</code>属性的第一个元组的属性，对于下面这个表</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> Sno       <span class=\\\"token operator\\\">|</span> Cno <span class=\\\"token operator\\\">|</span> Grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 1   <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    90 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201216121 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    85 <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n5 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p><code>grade</code>不是分组属性，上面已经提到，如果没有聚集函数的话，会只显示各分组的第一个元组对应的属性值</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> grade <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> sno       <span class=\\\"token operator\\\">|</span> grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201216121 <span class=\\\"token operator\\\">|</span>    85 <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n3 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>对非分组属性使用<code>having</code>子句。猜猜结果，使用<code>sno</code>作为分组属性，分成多组，<code>having</code>的作用对象为每个组，难道是判断每组中是否有元组的<code>grade</code>值在<code>90</code>到<code>98</code>？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> grade <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno <span class=\\\"token keyword\\\">having</span> grade <span class=\\\"token operator\\\">between</span> <span class=\\\"token number\\\">90</span> <span class=\\\"token operator\\\">and</span> <span class=\\\"token number\\\">98</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>看看结果，<code>sno</code>对应的<code>grade</code>值有<code>80</code>，<code>90</code>，有<code>grade</code>值在<code>90</code>到<code>98</code>，但结果的<code>sno</code>中却没有它，猜想失败了，会不会过滤条件在非分组属性时，仅仅作用于第一个值？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> sno       <span class=\\\"token operator\\\">|</span> grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n1 row <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>调换<code>sc</code>表中<code>201215122</code>对应的两个<code>grade</code>的值</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> Sno       <span class=\\\"token operator\\\">|</span> Cno <span class=\\\"token operator\\\">|</span> Grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 1   <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    90 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201216121 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    85 <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n5 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n\\n-------修改后--------\\n\\n+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> Sno       <span class=\\\"token operator\\\">|</span> Cno <span class=\\\"token operator\\\">|</span> Grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 1   <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    90 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span> 3   <span class=\\\"token operator\\\">|</span>    80 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201216121 <span class=\\\"token operator\\\">|</span> 2   <span class=\\\"token operator\\\">|</span>    85 <span class=\\\"token operator\\\">|</span>\\n+-----------+-----+-------+\\n5 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>重新查询一次</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-sql\\\"><code><span class=\\\"token keyword\\\">select</span> sno<span class=\\\"token punctuation\\\">,</span> grade <span class=\\\"token keyword\\\">from</span> sc <span class=\\\"token keyword\\\">group</span> <span class=\\\"token keyword\\\">by</span> Sno <span class=\\\"token keyword\\\">having</span> grade <span class=\\\"token operator\\\">between</span> <span class=\\\"token number\\\">90</span> <span class=\\\"token operator\\\">and</span> <span class=\\\"token number\\\">98</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>果然如此，在<code>having</code>中过滤非分组属性时，由于它有多个，便默认只对同组内的第一个元组作用过滤条件</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> sno       <span class=\\\"token operator\\\">|</span> grade <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n<span class=\\\"token operator\\\">|</span> 201215121 <span class=\\\"token operator\\\">|</span>    92 <span class=\\\"token operator\\\">|</span>\\n<span class=\\\"token operator\\\">|</span> 201215122 <span class=\\\"token operator\\\">|</span>    90 <span class=\\\"token operator\\\">|</span>\\n+-----------+-------+\\n2 rows <span class=\\\"token keyword\\\">in</span> <span class=\\\"token keyword\\\">set</span> <span class=\\\"token punctuation\\\">(</span>0.00 sec<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>总结一下：</p>\\n<p><code>having</code>和<code>where</code>非常像，都可以用来过滤元组，<code>where</code>子句的判断对象是所有元组，而<code>having</code>的判断对象</p>\\n<ul>\\n<li>分组属性，按照它分组后的，该组内所有的分组属性的属性值都是相同的，取它进行是否满足过滤条件</li>\\n<li>非分组属性，按照分组属性分组后，非分组属性内的属性组一般是不同的，取组内的第一个对应属性值来判断是否满足过滤条件。</li>\\n</ul>\",\"frontmatter\":{\"title\":\"数据库学习（一）\",\"date\":\"2018-02-17\",\"tags\":[\"MySQL\",\"SQL\"]}}},\"pathContext\":{\"slug\":\"/2018-02-17---database-1/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-2018-02-17-database-1.json\n// module id = 490\n// module chunks = 4978366234524"],"sourceRoot":""}